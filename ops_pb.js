// source: ops.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

var stream_pb = require('./stream_pb.js');
goog.object.extend(proto, stream_pb);
goog.exportSymbol('proto.ALU', null, global);
goog.exportSymbol('proto.ALU.ALUOp', null, global);
goog.exportSymbol('proto.ALU.ConnCase', null, global);
goog.exportSymbol('proto.ALU.Crd', null, global);
goog.exportSymbol('proto.ALU.Stage', null, global);
goog.exportSymbol('proto.ALU.Val', null, global);
goog.exportSymbol('proto.Broadcast', null, global);
goog.exportSymbol('proto.CoordDrop', null, global);
goog.exportSymbol('proto.CoordHold', null, global);
goog.exportSymbol('proto.CoordMask', null, global);
goog.exportSymbol('proto.FiberLookup', null, global);
goog.exportSymbol('proto.FiberWrite', null, global);
goog.exportSymbol('proto.Joiner', null, global);
goog.exportSymbol('proto.Joiner.JoinBundle', null, global);
goog.exportSymbol('proto.Joiner.Type', null, global);
goog.exportSymbol('proto.Operation', null, global);
goog.exportSymbol('proto.Operation.OpCase', null, global);
goog.exportSymbol('proto.Reduce', null, global);
goog.exportSymbol('proto.Repeat', null, global);
goog.exportSymbol('proto.RepeatSig', null, global);
goog.exportSymbol('proto.arrayvals', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Operation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.Operation.oneofGroups_);
};
goog.inherits(proto.Operation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Operation.displayName = 'proto.Operation';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Broadcast = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Broadcast.repeatedFields_, null);
};
goog.inherits(proto.Broadcast, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Broadcast.displayName = 'proto.Broadcast';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Joiner = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Joiner.repeatedFields_, null);
};
goog.inherits(proto.Joiner, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Joiner.displayName = 'proto.Joiner';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Joiner.JoinBundle = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Joiner.JoinBundle, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Joiner.JoinBundle.displayName = 'proto.Joiner.JoinBundle';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.FiberLookup = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.FiberLookup, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.FiberLookup.displayName = 'proto.FiberLookup';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.FiberWrite = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.FiberWrite, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.FiberWrite.displayName = 'proto.FiberWrite';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Repeat = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Repeat, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Repeat.displayName = 'proto.Repeat';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.RepeatSig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.RepeatSig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.RepeatSig.displayName = 'proto.RepeatSig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ALU = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ALU.repeatedFields_, proto.ALU.oneofGroups_);
};
goog.inherits(proto.ALU, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ALU.displayName = 'proto.ALU';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ALU.Val = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ALU.Val.repeatedFields_, null);
};
goog.inherits(proto.ALU.Val, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ALU.Val.displayName = 'proto.ALU.Val';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ALU.Crd = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ALU.Crd.repeatedFields_, null);
};
goog.inherits(proto.ALU.Crd, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ALU.Crd.displayName = 'proto.ALU.Crd';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ALU.Stage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ALU.Stage.repeatedFields_, null);
};
goog.inherits(proto.ALU.Stage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ALU.Stage.displayName = 'proto.ALU.Stage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Reduce = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Reduce, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Reduce.displayName = 'proto.Reduce';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.CoordHold = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.CoordHold, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.CoordHold.displayName = 'proto.CoordHold';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.CoordDrop = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.CoordDrop, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.CoordDrop.displayName = 'proto.CoordDrop';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.CoordMask = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.CoordMask, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.CoordMask.displayName = 'proto.CoordMask';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.arrayvals = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.arrayvals, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.arrayvals.displayName = 'proto.arrayvals';
}

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.Operation.oneofGroups_ = [[11,12,13,14,15,16,17,18,19,20,21]];

/**
 * @enum {number}
 */
proto.Operation.OpCase = {
  OP_NOT_SET: 0,
  BROADCAST: 11,
  JOINER: 12,
  FIBER_LOOKUP: 13,
  FIBER_WRITE: 14,
  REPEAT: 15,
  REPEATSIG: 16,
  ALU: 17,
  REDUCE: 18,
  COORD_HOLD: 19,
  COORD_MASK: 20,
  COORD_DROP: 21
};

/**
 * @return {proto.Operation.OpCase}
 */
proto.Operation.prototype.getOpCase = function() {
  return /** @type {proto.Operation.OpCase} */(jspb.Message.computeOneofCase(this, proto.Operation.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Operation.prototype.toObject = function(opt_includeInstance) {
  return proto.Operation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Operation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Operation.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    id: jspb.Message.getFieldWithDefault(msg, 2, 0),
    broadcast: (f = msg.getBroadcast()) && proto.Broadcast.toObject(includeInstance, f),
    joiner: (f = msg.getJoiner()) && proto.Joiner.toObject(includeInstance, f),
    fiberLookup: (f = msg.getFiberLookup()) && proto.FiberLookup.toObject(includeInstance, f),
    fiberWrite: (f = msg.getFiberWrite()) && proto.FiberWrite.toObject(includeInstance, f),
    repeat: (f = msg.getRepeat()) && proto.Repeat.toObject(includeInstance, f),
    repeatsig: (f = msg.getRepeatsig()) && proto.RepeatSig.toObject(includeInstance, f),
    alu: (f = msg.getAlu()) && proto.ALU.toObject(includeInstance, f),
    reduce: (f = msg.getReduce()) && proto.Reduce.toObject(includeInstance, f),
    coordHold: (f = msg.getCoordHold()) && proto.CoordHold.toObject(includeInstance, f),
    coordMask: (f = msg.getCoordMask()) && proto.CoordMask.toObject(includeInstance, f),
    coordDrop: (f = msg.getCoordDrop()) && proto.CoordDrop.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Operation}
 */
proto.Operation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Operation;
  return proto.Operation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Operation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Operation}
 */
proto.Operation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setId(value);
      break;
    case 11:
      var value = new proto.Broadcast;
      reader.readMessage(value,proto.Broadcast.deserializeBinaryFromReader);
      msg.setBroadcast(value);
      break;
    case 12:
      var value = new proto.Joiner;
      reader.readMessage(value,proto.Joiner.deserializeBinaryFromReader);
      msg.setJoiner(value);
      break;
    case 13:
      var value = new proto.FiberLookup;
      reader.readMessage(value,proto.FiberLookup.deserializeBinaryFromReader);
      msg.setFiberLookup(value);
      break;
    case 14:
      var value = new proto.FiberWrite;
      reader.readMessage(value,proto.FiberWrite.deserializeBinaryFromReader);
      msg.setFiberWrite(value);
      break;
    case 15:
      var value = new proto.Repeat;
      reader.readMessage(value,proto.Repeat.deserializeBinaryFromReader);
      msg.setRepeat(value);
      break;
    case 16:
      var value = new proto.RepeatSig;
      reader.readMessage(value,proto.RepeatSig.deserializeBinaryFromReader);
      msg.setRepeatsig(value);
      break;
    case 17:
      var value = new proto.ALU;
      reader.readMessage(value,proto.ALU.deserializeBinaryFromReader);
      msg.setAlu(value);
      break;
    case 18:
      var value = new proto.Reduce;
      reader.readMessage(value,proto.Reduce.deserializeBinaryFromReader);
      msg.setReduce(value);
      break;
    case 19:
      var value = new proto.CoordHold;
      reader.readMessage(value,proto.CoordHold.deserializeBinaryFromReader);
      msg.setCoordHold(value);
      break;
    case 20:
      var value = new proto.CoordMask;
      reader.readMessage(value,proto.CoordMask.deserializeBinaryFromReader);
      msg.setCoordMask(value);
      break;
    case 21:
      var value = new proto.CoordDrop;
      reader.readMessage(value,proto.CoordDrop.deserializeBinaryFromReader);
      msg.setCoordDrop(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Operation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Operation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Operation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Operation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getBroadcast();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.Broadcast.serializeBinaryToWriter
    );
  }
  f = message.getJoiner();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      proto.Joiner.serializeBinaryToWriter
    );
  }
  f = message.getFiberLookup();
  if (f != null) {
    writer.writeMessage(
      13,
      f,
      proto.FiberLookup.serializeBinaryToWriter
    );
  }
  f = message.getFiberWrite();
  if (f != null) {
    writer.writeMessage(
      14,
      f,
      proto.FiberWrite.serializeBinaryToWriter
    );
  }
  f = message.getRepeat();
  if (f != null) {
    writer.writeMessage(
      15,
      f,
      proto.Repeat.serializeBinaryToWriter
    );
  }
  f = message.getRepeatsig();
  if (f != null) {
    writer.writeMessage(
      16,
      f,
      proto.RepeatSig.serializeBinaryToWriter
    );
  }
  f = message.getAlu();
  if (f != null) {
    writer.writeMessage(
      17,
      f,
      proto.ALU.serializeBinaryToWriter
    );
  }
  f = message.getReduce();
  if (f != null) {
    writer.writeMessage(
      18,
      f,
      proto.Reduce.serializeBinaryToWriter
    );
  }
  f = message.getCoordHold();
  if (f != null) {
    writer.writeMessage(
      19,
      f,
      proto.CoordHold.serializeBinaryToWriter
    );
  }
  f = message.getCoordMask();
  if (f != null) {
    writer.writeMessage(
      20,
      f,
      proto.CoordMask.serializeBinaryToWriter
    );
  }
  f = message.getCoordDrop();
  if (f != null) {
    writer.writeMessage(
      21,
      f,
      proto.CoordDrop.serializeBinaryToWriter
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.Operation.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.Operation} returns this
 */
proto.Operation.prototype.setName = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Operation} returns this
 */
proto.Operation.prototype.clearName = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Operation.prototype.hasName = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint64 id = 2;
 * @return {number}
 */
proto.Operation.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.Operation} returns this
 */
proto.Operation.prototype.setId = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Operation} returns this
 */
proto.Operation.prototype.clearId = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Operation.prototype.hasId = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Broadcast broadcast = 11;
 * @return {?proto.Broadcast}
 */
proto.Operation.prototype.getBroadcast = function() {
  return /** @type{?proto.Broadcast} */ (
    jspb.Message.getWrapperField(this, proto.Broadcast, 11));
};


/**
 * @param {?proto.Broadcast|undefined} value
 * @return {!proto.Operation} returns this
*/
proto.Operation.prototype.setBroadcast = function(value) {
  return jspb.Message.setOneofWrapperField(this, 11, proto.Operation.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Operation} returns this
 */
proto.Operation.prototype.clearBroadcast = function() {
  return this.setBroadcast(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Operation.prototype.hasBroadcast = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional Joiner joiner = 12;
 * @return {?proto.Joiner}
 */
proto.Operation.prototype.getJoiner = function() {
  return /** @type{?proto.Joiner} */ (
    jspb.Message.getWrapperField(this, proto.Joiner, 12));
};


/**
 * @param {?proto.Joiner|undefined} value
 * @return {!proto.Operation} returns this
*/
proto.Operation.prototype.setJoiner = function(value) {
  return jspb.Message.setOneofWrapperField(this, 12, proto.Operation.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Operation} returns this
 */
proto.Operation.prototype.clearJoiner = function() {
  return this.setJoiner(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Operation.prototype.hasJoiner = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional FiberLookup fiber_lookup = 13;
 * @return {?proto.FiberLookup}
 */
proto.Operation.prototype.getFiberLookup = function() {
  return /** @type{?proto.FiberLookup} */ (
    jspb.Message.getWrapperField(this, proto.FiberLookup, 13));
};


/**
 * @param {?proto.FiberLookup|undefined} value
 * @return {!proto.Operation} returns this
*/
proto.Operation.prototype.setFiberLookup = function(value) {
  return jspb.Message.setOneofWrapperField(this, 13, proto.Operation.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Operation} returns this
 */
proto.Operation.prototype.clearFiberLookup = function() {
  return this.setFiberLookup(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Operation.prototype.hasFiberLookup = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional FiberWrite fiber_write = 14;
 * @return {?proto.FiberWrite}
 */
proto.Operation.prototype.getFiberWrite = function() {
  return /** @type{?proto.FiberWrite} */ (
    jspb.Message.getWrapperField(this, proto.FiberWrite, 14));
};


/**
 * @param {?proto.FiberWrite|undefined} value
 * @return {!proto.Operation} returns this
*/
proto.Operation.prototype.setFiberWrite = function(value) {
  return jspb.Message.setOneofWrapperField(this, 14, proto.Operation.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Operation} returns this
 */
proto.Operation.prototype.clearFiberWrite = function() {
  return this.setFiberWrite(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Operation.prototype.hasFiberWrite = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * optional Repeat repeat = 15;
 * @return {?proto.Repeat}
 */
proto.Operation.prototype.getRepeat = function() {
  return /** @type{?proto.Repeat} */ (
    jspb.Message.getWrapperField(this, proto.Repeat, 15));
};


/**
 * @param {?proto.Repeat|undefined} value
 * @return {!proto.Operation} returns this
*/
proto.Operation.prototype.setRepeat = function(value) {
  return jspb.Message.setOneofWrapperField(this, 15, proto.Operation.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Operation} returns this
 */
proto.Operation.prototype.clearRepeat = function() {
  return this.setRepeat(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Operation.prototype.hasRepeat = function() {
  return jspb.Message.getField(this, 15) != null;
};


/**
 * optional RepeatSig repeatsig = 16;
 * @return {?proto.RepeatSig}
 */
proto.Operation.prototype.getRepeatsig = function() {
  return /** @type{?proto.RepeatSig} */ (
    jspb.Message.getWrapperField(this, proto.RepeatSig, 16));
};


/**
 * @param {?proto.RepeatSig|undefined} value
 * @return {!proto.Operation} returns this
*/
proto.Operation.prototype.setRepeatsig = function(value) {
  return jspb.Message.setOneofWrapperField(this, 16, proto.Operation.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Operation} returns this
 */
proto.Operation.prototype.clearRepeatsig = function() {
  return this.setRepeatsig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Operation.prototype.hasRepeatsig = function() {
  return jspb.Message.getField(this, 16) != null;
};


/**
 * optional ALU alu = 17;
 * @return {?proto.ALU}
 */
proto.Operation.prototype.getAlu = function() {
  return /** @type{?proto.ALU} */ (
    jspb.Message.getWrapperField(this, proto.ALU, 17));
};


/**
 * @param {?proto.ALU|undefined} value
 * @return {!proto.Operation} returns this
*/
proto.Operation.prototype.setAlu = function(value) {
  return jspb.Message.setOneofWrapperField(this, 17, proto.Operation.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Operation} returns this
 */
proto.Operation.prototype.clearAlu = function() {
  return this.setAlu(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Operation.prototype.hasAlu = function() {
  return jspb.Message.getField(this, 17) != null;
};


/**
 * optional Reduce reduce = 18;
 * @return {?proto.Reduce}
 */
proto.Operation.prototype.getReduce = function() {
  return /** @type{?proto.Reduce} */ (
    jspb.Message.getWrapperField(this, proto.Reduce, 18));
};


/**
 * @param {?proto.Reduce|undefined} value
 * @return {!proto.Operation} returns this
*/
proto.Operation.prototype.setReduce = function(value) {
  return jspb.Message.setOneofWrapperField(this, 18, proto.Operation.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Operation} returns this
 */
proto.Operation.prototype.clearReduce = function() {
  return this.setReduce(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Operation.prototype.hasReduce = function() {
  return jspb.Message.getField(this, 18) != null;
};


/**
 * optional CoordHold coord_hold = 19;
 * @return {?proto.CoordHold}
 */
proto.Operation.prototype.getCoordHold = function() {
  return /** @type{?proto.CoordHold} */ (
    jspb.Message.getWrapperField(this, proto.CoordHold, 19));
};


/**
 * @param {?proto.CoordHold|undefined} value
 * @return {!proto.Operation} returns this
*/
proto.Operation.prototype.setCoordHold = function(value) {
  return jspb.Message.setOneofWrapperField(this, 19, proto.Operation.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Operation} returns this
 */
proto.Operation.prototype.clearCoordHold = function() {
  return this.setCoordHold(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Operation.prototype.hasCoordHold = function() {
  return jspb.Message.getField(this, 19) != null;
};


/**
 * optional CoordMask coord_mask = 20;
 * @return {?proto.CoordMask}
 */
proto.Operation.prototype.getCoordMask = function() {
  return /** @type{?proto.CoordMask} */ (
    jspb.Message.getWrapperField(this, proto.CoordMask, 20));
};


/**
 * @param {?proto.CoordMask|undefined} value
 * @return {!proto.Operation} returns this
*/
proto.Operation.prototype.setCoordMask = function(value) {
  return jspb.Message.setOneofWrapperField(this, 20, proto.Operation.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Operation} returns this
 */
proto.Operation.prototype.clearCoordMask = function() {
  return this.setCoordMask(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Operation.prototype.hasCoordMask = function() {
  return jspb.Message.getField(this, 20) != null;
};


/**
 * optional CoordDrop coord_drop = 21;
 * @return {?proto.CoordDrop}
 */
proto.Operation.prototype.getCoordDrop = function() {
  return /** @type{?proto.CoordDrop} */ (
    jspb.Message.getWrapperField(this, proto.CoordDrop, 21));
};


/**
 * @param {?proto.CoordDrop|undefined} value
 * @return {!proto.Operation} returns this
*/
proto.Operation.prototype.setCoordDrop = function(value) {
  return jspb.Message.setOneofWrapperField(this, 21, proto.Operation.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Operation} returns this
 */
proto.Operation.prototype.clearCoordDrop = function() {
  return this.setCoordDrop(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Operation.prototype.hasCoordDrop = function() {
  return jspb.Message.getField(this, 21) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Broadcast.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Broadcast.prototype.toObject = function(opt_includeInstance) {
  return proto.Broadcast.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Broadcast} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Broadcast.toObject = function(includeInstance, msg) {
  var f, obj = {
    input: (f = msg.getInput()) && stream_pb.CrdStream.StreamID.toObject(includeInstance, f),
    outputList: jspb.Message.toObjectList(msg.getOutputList(),
    stream_pb.CrdStream.StreamID.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Broadcast}
 */
proto.Broadcast.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Broadcast;
  return proto.Broadcast.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Broadcast} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Broadcast}
 */
proto.Broadcast.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new stream_pb.CrdStream.StreamID;
      reader.readMessage(value,stream_pb.CrdStream.StreamID.deserializeBinaryFromReader);
      msg.setInput(value);
      break;
    case 2:
      var value = new stream_pb.CrdStream.StreamID;
      reader.readMessage(value,stream_pb.CrdStream.StreamID.deserializeBinaryFromReader);
      msg.addOutput(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Broadcast.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Broadcast.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Broadcast} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Broadcast.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInput();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      stream_pb.CrdStream.StreamID.serializeBinaryToWriter
    );
  }
  f = message.getOutputList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      stream_pb.CrdStream.StreamID.serializeBinaryToWriter
    );
  }
};


/**
 * optional CrdStream.StreamID input = 1;
 * @return {?proto.CrdStream.StreamID}
 */
proto.Broadcast.prototype.getInput = function() {
  return /** @type{?proto.CrdStream.StreamID} */ (
    jspb.Message.getWrapperField(this, stream_pb.CrdStream.StreamID, 1));
};


/**
 * @param {?proto.CrdStream.StreamID|undefined} value
 * @return {!proto.Broadcast} returns this
*/
proto.Broadcast.prototype.setInput = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Broadcast} returns this
 */
proto.Broadcast.prototype.clearInput = function() {
  return this.setInput(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Broadcast.prototype.hasInput = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated CrdStream.StreamID output = 2;
 * @return {!Array<!proto.CrdStream.StreamID>}
 */
proto.Broadcast.prototype.getOutputList = function() {
  return /** @type{!Array<!proto.CrdStream.StreamID>} */ (
    jspb.Message.getRepeatedWrapperField(this, stream_pb.CrdStream.StreamID, 2));
};


/**
 * @param {!Array<!proto.CrdStream.StreamID>} value
 * @return {!proto.Broadcast} returns this
*/
proto.Broadcast.prototype.setOutputList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.CrdStream.StreamID=} opt_value
 * @param {number=} opt_index
 * @return {!proto.CrdStream.StreamID}
 */
proto.Broadcast.prototype.addOutput = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.CrdStream.StreamID, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Broadcast} returns this
 */
proto.Broadcast.prototype.clearOutputList = function() {
  return this.setOutputList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Joiner.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Joiner.prototype.toObject = function(opt_includeInstance) {
  return proto.Joiner.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Joiner} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Joiner.toObject = function(includeInstance, msg) {
  var f, obj = {
    joinType: jspb.Message.getFieldWithDefault(msg, 1, 0),
    bundlesList: jspb.Message.toObjectList(msg.getBundlesList(),
    proto.Joiner.JoinBundle.toObject, includeInstance),
    index: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Joiner}
 */
proto.Joiner.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Joiner;
  return proto.Joiner.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Joiner} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Joiner}
 */
proto.Joiner.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.Joiner.Type} */ (reader.readEnum());
      msg.setJoinType(value);
      break;
    case 2:
      var value = new proto.Joiner.JoinBundle;
      reader.readMessage(value,proto.Joiner.JoinBundle.deserializeBinaryFromReader);
      msg.addBundles(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setIndex(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Joiner.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Joiner.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Joiner} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Joiner.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getJoinType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getBundlesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.Joiner.JoinBundle.serializeBinaryToWriter
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.Joiner.Type = {
  INTERSECT: 0,
  UNION: 1
};




if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Joiner.JoinBundle.prototype.toObject = function(opt_includeInstance) {
  return proto.Joiner.JoinBundle.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Joiner.JoinBundle} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Joiner.JoinBundle.toObject = function(includeInstance, msg) {
  var f, obj = {
    crd: (f = msg.getCrd()) && stream_pb.CrdStream.StreamID.toObject(includeInstance, f),
    ref: (f = msg.getRef()) && stream_pb.RefStream.StreamID.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Joiner.JoinBundle}
 */
proto.Joiner.JoinBundle.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Joiner.JoinBundle;
  return proto.Joiner.JoinBundle.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Joiner.JoinBundle} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Joiner.JoinBundle}
 */
proto.Joiner.JoinBundle.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new stream_pb.CrdStream.StreamID;
      reader.readMessage(value,stream_pb.CrdStream.StreamID.deserializeBinaryFromReader);
      msg.setCrd(value);
      break;
    case 2:
      var value = new stream_pb.RefStream.StreamID;
      reader.readMessage(value,stream_pb.RefStream.StreamID.deserializeBinaryFromReader);
      msg.setRef(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Joiner.JoinBundle.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Joiner.JoinBundle.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Joiner.JoinBundle} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Joiner.JoinBundle.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCrd();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      stream_pb.CrdStream.StreamID.serializeBinaryToWriter
    );
  }
  f = message.getRef();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      stream_pb.RefStream.StreamID.serializeBinaryToWriter
    );
  }
};


/**
 * optional CrdStream.StreamID crd = 1;
 * @return {?proto.CrdStream.StreamID}
 */
proto.Joiner.JoinBundle.prototype.getCrd = function() {
  return /** @type{?proto.CrdStream.StreamID} */ (
    jspb.Message.getWrapperField(this, stream_pb.CrdStream.StreamID, 1));
};


/**
 * @param {?proto.CrdStream.StreamID|undefined} value
 * @return {!proto.Joiner.JoinBundle} returns this
*/
proto.Joiner.JoinBundle.prototype.setCrd = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Joiner.JoinBundle} returns this
 */
proto.Joiner.JoinBundle.prototype.clearCrd = function() {
  return this.setCrd(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Joiner.JoinBundle.prototype.hasCrd = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional RefStream.StreamID ref = 2;
 * @return {?proto.RefStream.StreamID}
 */
proto.Joiner.JoinBundle.prototype.getRef = function() {
  return /** @type{?proto.RefStream.StreamID} */ (
    jspb.Message.getWrapperField(this, stream_pb.RefStream.StreamID, 2));
};


/**
 * @param {?proto.RefStream.StreamID|undefined} value
 * @return {!proto.Joiner.JoinBundle} returns this
*/
proto.Joiner.JoinBundle.prototype.setRef = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Joiner.JoinBundle} returns this
 */
proto.Joiner.JoinBundle.prototype.clearRef = function() {
  return this.setRef(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Joiner.JoinBundle.prototype.hasRef = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Type join_type = 1;
 * @return {!proto.Joiner.Type}
 */
proto.Joiner.prototype.getJoinType = function() {
  return /** @type {!proto.Joiner.Type} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.Joiner.Type} value
 * @return {!proto.Joiner} returns this
 */
proto.Joiner.prototype.setJoinType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * repeated JoinBundle bundles = 2;
 * @return {!Array<!proto.Joiner.JoinBundle>}
 */
proto.Joiner.prototype.getBundlesList = function() {
  return /** @type{!Array<!proto.Joiner.JoinBundle>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Joiner.JoinBundle, 2));
};


/**
 * @param {!Array<!proto.Joiner.JoinBundle>} value
 * @return {!proto.Joiner} returns this
*/
proto.Joiner.prototype.setBundlesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.Joiner.JoinBundle=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Joiner.JoinBundle}
 */
proto.Joiner.prototype.addBundles = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.Joiner.JoinBundle, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Joiner} returns this
 */
proto.Joiner.prototype.clearBundlesList = function() {
  return this.setBundlesList([]);
};


/**
 * optional string index = 3;
 * @return {string}
 */
proto.Joiner.prototype.getIndex = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.Joiner} returns this
 */
proto.Joiner.prototype.setIndex = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Joiner} returns this
 */
proto.Joiner.prototype.clearIndex = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Joiner.prototype.hasIndex = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.FiberLookup.prototype.toObject = function(opt_includeInstance) {
  return proto.FiberLookup.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.FiberLookup} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.FiberLookup.toObject = function(includeInstance, msg) {
  var f, obj = {
    ref: (f = msg.getRef()) && stream_pb.RefStream.StreamID.toObject(includeInstance, f),
    outputRef: (f = msg.getOutputRef()) && stream_pb.RefStream.StreamID.toObject(includeInstance, f),
    outputCrd: (f = msg.getOutputCrd()) && stream_pb.CrdStream.StreamID.toObject(includeInstance, f),
    index: jspb.Message.getFieldWithDefault(msg, 4, ""),
    tensor: jspb.Message.getFieldWithDefault(msg, 5, ""),
    mode: jspb.Message.getFieldWithDefault(msg, 6, 0),
    format: jspb.Message.getFieldWithDefault(msg, 7, ""),
    src: jspb.Message.getBooleanFieldWithDefault(msg, 8, false),
    root: jspb.Message.getBooleanFieldWithDefault(msg, 9, false),
    label: jspb.Message.getFieldWithDefault(msg, 10, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.FiberLookup}
 */
proto.FiberLookup.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.FiberLookup;
  return proto.FiberLookup.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.FiberLookup} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.FiberLookup}
 */
proto.FiberLookup.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new stream_pb.RefStream.StreamID;
      reader.readMessage(value,stream_pb.RefStream.StreamID.deserializeBinaryFromReader);
      msg.setRef(value);
      break;
    case 2:
      var value = new stream_pb.RefStream.StreamID;
      reader.readMessage(value,stream_pb.RefStream.StreamID.deserializeBinaryFromReader);
      msg.setOutputRef(value);
      break;
    case 3:
      var value = new stream_pb.CrdStream.StreamID;
      reader.readMessage(value,stream_pb.CrdStream.StreamID.deserializeBinaryFromReader);
      msg.setOutputCrd(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setIndex(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setTensor(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMode(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setFormat(value);
      break;
    case 8:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSrc(value);
      break;
    case 9:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setRoot(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setLabel(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.FiberLookup.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.FiberLookup.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.FiberLookup} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.FiberLookup.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRef();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      stream_pb.RefStream.StreamID.serializeBinaryToWriter
    );
  }
  f = message.getOutputRef();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      stream_pb.RefStream.StreamID.serializeBinaryToWriter
    );
  }
  f = message.getOutputCrd();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      stream_pb.CrdStream.StreamID.serializeBinaryToWriter
    );
  }
  f = message.getIndex();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getTensor();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getMode();
  if (f !== 0) {
    writer.writeUint32(
      6,
      f
    );
  }
  f = message.getFormat();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getSrc();
  if (f) {
    writer.writeBool(
      8,
      f
    );
  }
  f = message.getRoot();
  if (f) {
    writer.writeBool(
      9,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeString(
      10,
      f
    );
  }
};


/**
 * optional RefStream.StreamID ref = 1;
 * @return {?proto.RefStream.StreamID}
 */
proto.FiberLookup.prototype.getRef = function() {
  return /** @type{?proto.RefStream.StreamID} */ (
    jspb.Message.getWrapperField(this, stream_pb.RefStream.StreamID, 1));
};


/**
 * @param {?proto.RefStream.StreamID|undefined} value
 * @return {!proto.FiberLookup} returns this
*/
proto.FiberLookup.prototype.setRef = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.FiberLookup} returns this
 */
proto.FiberLookup.prototype.clearRef = function() {
  return this.setRef(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.FiberLookup.prototype.hasRef = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional RefStream.StreamID output_ref = 2;
 * @return {?proto.RefStream.StreamID}
 */
proto.FiberLookup.prototype.getOutputRef = function() {
  return /** @type{?proto.RefStream.StreamID} */ (
    jspb.Message.getWrapperField(this, stream_pb.RefStream.StreamID, 2));
};


/**
 * @param {?proto.RefStream.StreamID|undefined} value
 * @return {!proto.FiberLookup} returns this
*/
proto.FiberLookup.prototype.setOutputRef = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.FiberLookup} returns this
 */
proto.FiberLookup.prototype.clearOutputRef = function() {
  return this.setOutputRef(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.FiberLookup.prototype.hasOutputRef = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional CrdStream.StreamID output_crd = 3;
 * @return {?proto.CrdStream.StreamID}
 */
proto.FiberLookup.prototype.getOutputCrd = function() {
  return /** @type{?proto.CrdStream.StreamID} */ (
    jspb.Message.getWrapperField(this, stream_pb.CrdStream.StreamID, 3));
};


/**
 * @param {?proto.CrdStream.StreamID|undefined} value
 * @return {!proto.FiberLookup} returns this
*/
proto.FiberLookup.prototype.setOutputCrd = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.FiberLookup} returns this
 */
proto.FiberLookup.prototype.clearOutputCrd = function() {
  return this.setOutputCrd(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.FiberLookup.prototype.hasOutputCrd = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string index = 4;
 * @return {string}
 */
proto.FiberLookup.prototype.getIndex = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.FiberLookup} returns this
 */
proto.FiberLookup.prototype.setIndex = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string tensor = 5;
 * @return {string}
 */
proto.FiberLookup.prototype.getTensor = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.FiberLookup} returns this
 */
proto.FiberLookup.prototype.setTensor = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional uint32 mode = 6;
 * @return {number}
 */
proto.FiberLookup.prototype.getMode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.FiberLookup} returns this
 */
proto.FiberLookup.prototype.setMode = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional string format = 7;
 * @return {string}
 */
proto.FiberLookup.prototype.getFormat = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.FiberLookup} returns this
 */
proto.FiberLookup.prototype.setFormat = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional bool src = 8;
 * @return {boolean}
 */
proto.FiberLookup.prototype.getSrc = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 8, false));
};


/**
 * @param {boolean} value
 * @return {!proto.FiberLookup} returns this
 */
proto.FiberLookup.prototype.setSrc = function(value) {
  return jspb.Message.setProto3BooleanField(this, 8, value);
};


/**
 * optional bool root = 9;
 * @return {boolean}
 */
proto.FiberLookup.prototype.getRoot = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 9, false));
};


/**
 * @param {boolean} value
 * @return {!proto.FiberLookup} returns this
 */
proto.FiberLookup.prototype.setRoot = function(value) {
  return jspb.Message.setProto3BooleanField(this, 9, value);
};


/**
 * optional string label = 10;
 * @return {string}
 */
proto.FiberLookup.prototype.getLabel = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.FiberLookup} returns this
 */
proto.FiberLookup.prototype.setLabel = function(value) {
  return jspb.Message.setField(this, 10, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.FiberLookup} returns this
 */
proto.FiberLookup.prototype.clearLabel = function() {
  return jspb.Message.setField(this, 10, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.FiberLookup.prototype.hasLabel = function() {
  return jspb.Message.getField(this, 10) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.FiberWrite.prototype.toObject = function(opt_includeInstance) {
  return proto.FiberWrite.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.FiberWrite} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.FiberWrite.toObject = function(includeInstance, msg) {
  var f, obj = {
    inputCrd: (f = msg.getInputCrd()) && stream_pb.CrdStream.StreamID.toObject(includeInstance, f),
    index: jspb.Message.getFieldWithDefault(msg, 2, ""),
    tensor: jspb.Message.getFieldWithDefault(msg, 3, ""),
    mode: jspb.Message.getFieldWithDefault(msg, 4, 0),
    format: jspb.Message.getFieldWithDefault(msg, 5, ""),
    segsize: jspb.Message.getFieldWithDefault(msg, 6, 0),
    crdsize: jspb.Message.getFieldWithDefault(msg, 7, 0),
    sink: jspb.Message.getBooleanFieldWithDefault(msg, 8, false),
    label: jspb.Message.getFieldWithDefault(msg, 9, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.FiberWrite}
 */
proto.FiberWrite.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.FiberWrite;
  return proto.FiberWrite.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.FiberWrite} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.FiberWrite}
 */
proto.FiberWrite.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new stream_pb.CrdStream.StreamID;
      reader.readMessage(value,stream_pb.CrdStream.StreamID.deserializeBinaryFromReader);
      msg.setInputCrd(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setIndex(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setTensor(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMode(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setFormat(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSegsize(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCrdsize(value);
      break;
    case 8:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSink(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setLabel(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.FiberWrite.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.FiberWrite.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.FiberWrite} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.FiberWrite.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInputCrd();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      stream_pb.CrdStream.StreamID.serializeBinaryToWriter
    );
  }
  f = message.getIndex();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getTensor();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getMode();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getFormat();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getSegsize();
  if (f !== 0) {
    writer.writeUint64(
      6,
      f
    );
  }
  f = message.getCrdsize();
  if (f !== 0) {
    writer.writeUint32(
      7,
      f
    );
  }
  f = message.getSink();
  if (f) {
    writer.writeBool(
      8,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeString(
      9,
      f
    );
  }
};


/**
 * optional CrdStream.StreamID input_crd = 1;
 * @return {?proto.CrdStream.StreamID}
 */
proto.FiberWrite.prototype.getInputCrd = function() {
  return /** @type{?proto.CrdStream.StreamID} */ (
    jspb.Message.getWrapperField(this, stream_pb.CrdStream.StreamID, 1));
};


/**
 * @param {?proto.CrdStream.StreamID|undefined} value
 * @return {!proto.FiberWrite} returns this
*/
proto.FiberWrite.prototype.setInputCrd = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.FiberWrite} returns this
 */
proto.FiberWrite.prototype.clearInputCrd = function() {
  return this.setInputCrd(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.FiberWrite.prototype.hasInputCrd = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string index = 2;
 * @return {string}
 */
proto.FiberWrite.prototype.getIndex = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.FiberWrite} returns this
 */
proto.FiberWrite.prototype.setIndex = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string tensor = 3;
 * @return {string}
 */
proto.FiberWrite.prototype.getTensor = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.FiberWrite} returns this
 */
proto.FiberWrite.prototype.setTensor = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional uint32 mode = 4;
 * @return {number}
 */
proto.FiberWrite.prototype.getMode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.FiberWrite} returns this
 */
proto.FiberWrite.prototype.setMode = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional string format = 5;
 * @return {string}
 */
proto.FiberWrite.prototype.getFormat = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.FiberWrite} returns this
 */
proto.FiberWrite.prototype.setFormat = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional uint64 segsize = 6;
 * @return {number}
 */
proto.FiberWrite.prototype.getSegsize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.FiberWrite} returns this
 */
proto.FiberWrite.prototype.setSegsize = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional uint32 crdsize = 7;
 * @return {number}
 */
proto.FiberWrite.prototype.getCrdsize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.FiberWrite} returns this
 */
proto.FiberWrite.prototype.setCrdsize = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional bool sink = 8;
 * @return {boolean}
 */
proto.FiberWrite.prototype.getSink = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 8, false));
};


/**
 * @param {boolean} value
 * @return {!proto.FiberWrite} returns this
 */
proto.FiberWrite.prototype.setSink = function(value) {
  return jspb.Message.setProto3BooleanField(this, 8, value);
};


/**
 * optional string label = 9;
 * @return {string}
 */
proto.FiberWrite.prototype.getLabel = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.FiberWrite} returns this
 */
proto.FiberWrite.prototype.setLabel = function(value) {
  return jspb.Message.setField(this, 9, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.FiberWrite} returns this
 */
proto.FiberWrite.prototype.clearLabel = function() {
  return jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.FiberWrite.prototype.hasLabel = function() {
  return jspb.Message.getField(this, 9) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Repeat.prototype.toObject = function(opt_includeInstance) {
  return proto.Repeat.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Repeat} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Repeat.toObject = function(includeInstance, msg) {
  var f, obj = {
    inputRef: (f = msg.getInputRef()) && stream_pb.RefStream.StreamID.toObject(includeInstance, f),
    inputRepSig: (f = msg.getInputRepSig()) && stream_pb.RepSigStream.StreamID.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Repeat}
 */
proto.Repeat.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Repeat;
  return proto.Repeat.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Repeat} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Repeat}
 */
proto.Repeat.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new stream_pb.RefStream.StreamID;
      reader.readMessage(value,stream_pb.RefStream.StreamID.deserializeBinaryFromReader);
      msg.setInputRef(value);
      break;
    case 2:
      var value = new stream_pb.RepSigStream.StreamID;
      reader.readMessage(value,stream_pb.RepSigStream.StreamID.deserializeBinaryFromReader);
      msg.setInputRepSig(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Repeat.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Repeat.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Repeat} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Repeat.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInputRef();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      stream_pb.RefStream.StreamID.serializeBinaryToWriter
    );
  }
  f = message.getInputRepSig();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      stream_pb.RepSigStream.StreamID.serializeBinaryToWriter
    );
  }
};


/**
 * optional RefStream.StreamID input_ref = 1;
 * @return {?proto.RefStream.StreamID}
 */
proto.Repeat.prototype.getInputRef = function() {
  return /** @type{?proto.RefStream.StreamID} */ (
    jspb.Message.getWrapperField(this, stream_pb.RefStream.StreamID, 1));
};


/**
 * @param {?proto.RefStream.StreamID|undefined} value
 * @return {!proto.Repeat} returns this
*/
proto.Repeat.prototype.setInputRef = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Repeat} returns this
 */
proto.Repeat.prototype.clearInputRef = function() {
  return this.setInputRef(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Repeat.prototype.hasInputRef = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional RepSigStream.StreamID input_rep_sig = 2;
 * @return {?proto.RepSigStream.StreamID}
 */
proto.Repeat.prototype.getInputRepSig = function() {
  return /** @type{?proto.RepSigStream.StreamID} */ (
    jspb.Message.getWrapperField(this, stream_pb.RepSigStream.StreamID, 2));
};


/**
 * @param {?proto.RepSigStream.StreamID|undefined} value
 * @return {!proto.Repeat} returns this
*/
proto.Repeat.prototype.setInputRepSig = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Repeat} returns this
 */
proto.Repeat.prototype.clearInputRepSig = function() {
  return this.setInputRepSig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Repeat.prototype.hasInputRepSig = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.RepeatSig.prototype.toObject = function(opt_includeInstance) {
  return proto.RepeatSig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.RepeatSig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RepeatSig.toObject = function(includeInstance, msg) {
  var f, obj = {
    inputCrd: (f = msg.getInputCrd()) && stream_pb.CrdStream.StreamID.toObject(includeInstance, f),
    outputRepSig: (f = msg.getOutputRepSig()) && stream_pb.RepSigStream.StreamID.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.RepeatSig}
 */
proto.RepeatSig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.RepeatSig;
  return proto.RepeatSig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.RepeatSig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.RepeatSig}
 */
proto.RepeatSig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new stream_pb.CrdStream.StreamID;
      reader.readMessage(value,stream_pb.CrdStream.StreamID.deserializeBinaryFromReader);
      msg.setInputCrd(value);
      break;
    case 2:
      var value = new stream_pb.RepSigStream.StreamID;
      reader.readMessage(value,stream_pb.RepSigStream.StreamID.deserializeBinaryFromReader);
      msg.setOutputRepSig(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.RepeatSig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.RepeatSig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.RepeatSig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RepeatSig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInputCrd();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      stream_pb.CrdStream.StreamID.serializeBinaryToWriter
    );
  }
  f = message.getOutputRepSig();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      stream_pb.RepSigStream.StreamID.serializeBinaryToWriter
    );
  }
};


/**
 * optional CrdStream.StreamID input_crd = 1;
 * @return {?proto.CrdStream.StreamID}
 */
proto.RepeatSig.prototype.getInputCrd = function() {
  return /** @type{?proto.CrdStream.StreamID} */ (
    jspb.Message.getWrapperField(this, stream_pb.CrdStream.StreamID, 1));
};


/**
 * @param {?proto.CrdStream.StreamID|undefined} value
 * @return {!proto.RepeatSig} returns this
*/
proto.RepeatSig.prototype.setInputCrd = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.RepeatSig} returns this
 */
proto.RepeatSig.prototype.clearInputCrd = function() {
  return this.setInputCrd(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.RepeatSig.prototype.hasInputCrd = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional RepSigStream.StreamID output_rep_sig = 2;
 * @return {?proto.RepSigStream.StreamID}
 */
proto.RepeatSig.prototype.getOutputRepSig = function() {
  return /** @type{?proto.RepSigStream.StreamID} */ (
    jspb.Message.getWrapperField(this, stream_pb.RepSigStream.StreamID, 2));
};


/**
 * @param {?proto.RepSigStream.StreamID|undefined} value
 * @return {!proto.RepeatSig} returns this
*/
proto.RepeatSig.prototype.setOutputRepSig = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.RepeatSig} returns this
 */
proto.RepeatSig.prototype.clearOutputRepSig = function() {
  return this.setOutputRepSig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.RepeatSig.prototype.hasOutputRepSig = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ALU.repeatedFields_ = [3];

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.ALU.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.ALU.ConnCase = {
  CONN_NOT_SET: 0,
  VALS: 1,
  CRDS: 2
};

/**
 * @return {proto.ALU.ConnCase}
 */
proto.ALU.prototype.getConnCase = function() {
  return /** @type {proto.ALU.ConnCase} */(jspb.Message.computeOneofCase(this, proto.ALU.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ALU.prototype.toObject = function(opt_includeInstance) {
  return proto.ALU.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ALU} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ALU.toObject = function(includeInstance, msg) {
  var f, obj = {
    vals: (f = msg.getVals()) && proto.ALU.Val.toObject(includeInstance, f),
    crds: (f = msg.getCrds()) && proto.ALU.Crd.toObject(includeInstance, f),
    stagesList: jspb.Message.toObjectList(msg.getStagesList(),
    proto.ALU.Stage.toObject, includeInstance),
    outputVal: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ALU}
 */
proto.ALU.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ALU;
  return proto.ALU.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ALU} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ALU}
 */
proto.ALU.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ALU.Val;
      reader.readMessage(value,proto.ALU.Val.deserializeBinaryFromReader);
      msg.setVals(value);
      break;
    case 2:
      var value = new proto.ALU.Crd;
      reader.readMessage(value,proto.ALU.Crd.deserializeBinaryFromReader);
      msg.setCrds(value);
      break;
    case 3:
      var value = new proto.ALU.Stage;
      reader.readMessage(value,proto.ALU.Stage.deserializeBinaryFromReader);
      msg.addStages(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setOutputVal(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ALU.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ALU.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ALU} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ALU.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVals();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.ALU.Val.serializeBinaryToWriter
    );
  }
  f = message.getCrds();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.ALU.Crd.serializeBinaryToWriter
    );
  }
  f = message.getStagesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.ALU.Stage.serializeBinaryToWriter
    );
  }
  f = message.getOutputVal();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.ALU.ALUOp = {
  ADD: 0,
  SUB: 1,
  MUL: 2,
  DIV: 3,
  EXP: 4,
  SIN: 5,
  COS: 6,
  MAX: 7
};


/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ALU.Val.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ALU.Val.prototype.toObject = function(opt_includeInstance) {
  return proto.ALU.Val.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ALU.Val} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ALU.Val.toObject = function(includeInstance, msg) {
  var f, obj = {
    inputsList: jspb.Message.toObjectList(msg.getInputsList(),
    stream_pb.ValStream.StreamID.toObject, includeInstance),
    output: (f = msg.getOutput()) && stream_pb.ValStream.StreamID.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ALU.Val}
 */
proto.ALU.Val.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ALU.Val;
  return proto.ALU.Val.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ALU.Val} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ALU.Val}
 */
proto.ALU.Val.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new stream_pb.ValStream.StreamID;
      reader.readMessage(value,stream_pb.ValStream.StreamID.deserializeBinaryFromReader);
      msg.addInputs(value);
      break;
    case 2:
      var value = new stream_pb.ValStream.StreamID;
      reader.readMessage(value,stream_pb.ValStream.StreamID.deserializeBinaryFromReader);
      msg.setOutput(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ALU.Val.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ALU.Val.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ALU.Val} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ALU.Val.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInputsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      stream_pb.ValStream.StreamID.serializeBinaryToWriter
    );
  }
  f = message.getOutput();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      stream_pb.ValStream.StreamID.serializeBinaryToWriter
    );
  }
};


/**
 * repeated ValStream.StreamID inputs = 1;
 * @return {!Array<!proto.ValStream.StreamID>}
 */
proto.ALU.Val.prototype.getInputsList = function() {
  return /** @type{!Array<!proto.ValStream.StreamID>} */ (
    jspb.Message.getRepeatedWrapperField(this, stream_pb.ValStream.StreamID, 1));
};


/**
 * @param {!Array<!proto.ValStream.StreamID>} value
 * @return {!proto.ALU.Val} returns this
*/
proto.ALU.Val.prototype.setInputsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.ValStream.StreamID=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ValStream.StreamID}
 */
proto.ALU.Val.prototype.addInputs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.ValStream.StreamID, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ALU.Val} returns this
 */
proto.ALU.Val.prototype.clearInputsList = function() {
  return this.setInputsList([]);
};


/**
 * optional ValStream.StreamID output = 2;
 * @return {?proto.ValStream.StreamID}
 */
proto.ALU.Val.prototype.getOutput = function() {
  return /** @type{?proto.ValStream.StreamID} */ (
    jspb.Message.getWrapperField(this, stream_pb.ValStream.StreamID, 2));
};


/**
 * @param {?proto.ValStream.StreamID|undefined} value
 * @return {!proto.ALU.Val} returns this
*/
proto.ALU.Val.prototype.setOutput = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ALU.Val} returns this
 */
proto.ALU.Val.prototype.clearOutput = function() {
  return this.setOutput(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ALU.Val.prototype.hasOutput = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ALU.Crd.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ALU.Crd.prototype.toObject = function(opt_includeInstance) {
  return proto.ALU.Crd.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ALU.Crd} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ALU.Crd.toObject = function(includeInstance, msg) {
  var f, obj = {
    inputsList: jspb.Message.toObjectList(msg.getInputsList(),
    stream_pb.CrdStream.StreamID.toObject, includeInstance),
    output: (f = msg.getOutput()) && stream_pb.CrdStream.StreamID.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ALU.Crd}
 */
proto.ALU.Crd.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ALU.Crd;
  return proto.ALU.Crd.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ALU.Crd} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ALU.Crd}
 */
proto.ALU.Crd.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new stream_pb.CrdStream.StreamID;
      reader.readMessage(value,stream_pb.CrdStream.StreamID.deserializeBinaryFromReader);
      msg.addInputs(value);
      break;
    case 2:
      var value = new stream_pb.CrdStream.StreamID;
      reader.readMessage(value,stream_pb.CrdStream.StreamID.deserializeBinaryFromReader);
      msg.setOutput(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ALU.Crd.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ALU.Crd.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ALU.Crd} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ALU.Crd.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInputsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      stream_pb.CrdStream.StreamID.serializeBinaryToWriter
    );
  }
  f = message.getOutput();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      stream_pb.CrdStream.StreamID.serializeBinaryToWriter
    );
  }
};


/**
 * repeated CrdStream.StreamID inputs = 1;
 * @return {!Array<!proto.CrdStream.StreamID>}
 */
proto.ALU.Crd.prototype.getInputsList = function() {
  return /** @type{!Array<!proto.CrdStream.StreamID>} */ (
    jspb.Message.getRepeatedWrapperField(this, stream_pb.CrdStream.StreamID, 1));
};


/**
 * @param {!Array<!proto.CrdStream.StreamID>} value
 * @return {!proto.ALU.Crd} returns this
*/
proto.ALU.Crd.prototype.setInputsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.CrdStream.StreamID=} opt_value
 * @param {number=} opt_index
 * @return {!proto.CrdStream.StreamID}
 */
proto.ALU.Crd.prototype.addInputs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.CrdStream.StreamID, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ALU.Crd} returns this
 */
proto.ALU.Crd.prototype.clearInputsList = function() {
  return this.setInputsList([]);
};


/**
 * optional CrdStream.StreamID output = 2;
 * @return {?proto.CrdStream.StreamID}
 */
proto.ALU.Crd.prototype.getOutput = function() {
  return /** @type{?proto.CrdStream.StreamID} */ (
    jspb.Message.getWrapperField(this, stream_pb.CrdStream.StreamID, 2));
};


/**
 * @param {?proto.CrdStream.StreamID|undefined} value
 * @return {!proto.ALU.Crd} returns this
*/
proto.ALU.Crd.prototype.setOutput = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ALU.Crd} returns this
 */
proto.ALU.Crd.prototype.clearOutput = function() {
  return this.setOutput(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ALU.Crd.prototype.hasOutput = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ALU.Stage.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ALU.Stage.prototype.toObject = function(opt_includeInstance) {
  return proto.ALU.Stage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ALU.Stage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ALU.Stage.toObject = function(includeInstance, msg) {
  var f, obj = {
    inputsList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,
    output: jspb.Message.getFieldWithDefault(msg, 2, 0),
    op: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ALU.Stage}
 */
proto.ALU.Stage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ALU.Stage;
  return proto.ALU.Stage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ALU.Stage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ALU.Stage}
 */
proto.ALU.Stage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedUint64() : [reader.readUint64()]);
      for (var i = 0; i < values.length; i++) {
        msg.addInputs(values[i]);
      }
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setOutput(value);
      break;
    case 3:
      var value = /** @type {!proto.ALU.ALUOp} */ (reader.readEnum());
      msg.setOp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ALU.Stage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ALU.Stage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ALU.Stage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ALU.Stage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInputsList();
  if (f.length > 0) {
    writer.writePackedUint64(
      1,
      f
    );
  }
  f = message.getOutput();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getOp();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
};


/**
 * repeated uint64 inputs = 1;
 * @return {!Array<number>}
 */
proto.ALU.Stage.prototype.getInputsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.ALU.Stage} returns this
 */
proto.ALU.Stage.prototype.setInputsList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.ALU.Stage} returns this
 */
proto.ALU.Stage.prototype.addInputs = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ALU.Stage} returns this
 */
proto.ALU.Stage.prototype.clearInputsList = function() {
  return this.setInputsList([]);
};


/**
 * optional uint64 output = 2;
 * @return {number}
 */
proto.ALU.Stage.prototype.getOutput = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.ALU.Stage} returns this
 */
proto.ALU.Stage.prototype.setOutput = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional ALUOp op = 3;
 * @return {!proto.ALU.ALUOp}
 */
proto.ALU.Stage.prototype.getOp = function() {
  return /** @type {!proto.ALU.ALUOp} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.ALU.ALUOp} value
 * @return {!proto.ALU.Stage} returns this
 */
proto.ALU.Stage.prototype.setOp = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional Val vals = 1;
 * @return {?proto.ALU.Val}
 */
proto.ALU.prototype.getVals = function() {
  return /** @type{?proto.ALU.Val} */ (
    jspb.Message.getWrapperField(this, proto.ALU.Val, 1));
};


/**
 * @param {?proto.ALU.Val|undefined} value
 * @return {!proto.ALU} returns this
*/
proto.ALU.prototype.setVals = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.ALU.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ALU} returns this
 */
proto.ALU.prototype.clearVals = function() {
  return this.setVals(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ALU.prototype.hasVals = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Crd crds = 2;
 * @return {?proto.ALU.Crd}
 */
proto.ALU.prototype.getCrds = function() {
  return /** @type{?proto.ALU.Crd} */ (
    jspb.Message.getWrapperField(this, proto.ALU.Crd, 2));
};


/**
 * @param {?proto.ALU.Crd|undefined} value
 * @return {!proto.ALU} returns this
*/
proto.ALU.prototype.setCrds = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.ALU.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ALU} returns this
 */
proto.ALU.prototype.clearCrds = function() {
  return this.setCrds(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ALU.prototype.hasCrds = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated Stage stages = 3;
 * @return {!Array<!proto.ALU.Stage>}
 */
proto.ALU.prototype.getStagesList = function() {
  return /** @type{!Array<!proto.ALU.Stage>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ALU.Stage, 3));
};


/**
 * @param {!Array<!proto.ALU.Stage>} value
 * @return {!proto.ALU} returns this
*/
proto.ALU.prototype.setStagesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.ALU.Stage=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ALU.Stage}
 */
proto.ALU.prototype.addStages = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.ALU.Stage, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ALU} returns this
 */
proto.ALU.prototype.clearStagesList = function() {
  return this.setStagesList([]);
};


/**
 * optional uint64 output_val = 4;
 * @return {number}
 */
proto.ALU.prototype.getOutputVal = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.ALU} returns this
 */
proto.ALU.prototype.setOutputVal = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Reduce.prototype.toObject = function(opt_includeInstance) {
  return proto.Reduce.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Reduce} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Reduce.toObject = function(includeInstance, msg) {
  var f, obj = {
    inputVal: (f = msg.getInputVal()) && stream_pb.ValStream.StreamID.toObject(includeInstance, f),
    outputVal: (f = msg.getOutputVal()) && stream_pb.ValStream.StreamID.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Reduce}
 */
proto.Reduce.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Reduce;
  return proto.Reduce.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Reduce} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Reduce}
 */
proto.Reduce.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new stream_pb.ValStream.StreamID;
      reader.readMessage(value,stream_pb.ValStream.StreamID.deserializeBinaryFromReader);
      msg.setInputVal(value);
      break;
    case 2:
      var value = new stream_pb.ValStream.StreamID;
      reader.readMessage(value,stream_pb.ValStream.StreamID.deserializeBinaryFromReader);
      msg.setOutputVal(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Reduce.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Reduce.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Reduce} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Reduce.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInputVal();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      stream_pb.ValStream.StreamID.serializeBinaryToWriter
    );
  }
  f = message.getOutputVal();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      stream_pb.ValStream.StreamID.serializeBinaryToWriter
    );
  }
};


/**
 * optional ValStream.StreamID input_val = 1;
 * @return {?proto.ValStream.StreamID}
 */
proto.Reduce.prototype.getInputVal = function() {
  return /** @type{?proto.ValStream.StreamID} */ (
    jspb.Message.getWrapperField(this, stream_pb.ValStream.StreamID, 1));
};


/**
 * @param {?proto.ValStream.StreamID|undefined} value
 * @return {!proto.Reduce} returns this
*/
proto.Reduce.prototype.setInputVal = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Reduce} returns this
 */
proto.Reduce.prototype.clearInputVal = function() {
  return this.setInputVal(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Reduce.prototype.hasInputVal = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ValStream.StreamID output_val = 2;
 * @return {?proto.ValStream.StreamID}
 */
proto.Reduce.prototype.getOutputVal = function() {
  return /** @type{?proto.ValStream.StreamID} */ (
    jspb.Message.getWrapperField(this, stream_pb.ValStream.StreamID, 2));
};


/**
 * @param {?proto.ValStream.StreamID|undefined} value
 * @return {!proto.Reduce} returns this
*/
proto.Reduce.prototype.setOutputVal = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Reduce} returns this
 */
proto.Reduce.prototype.clearOutputVal = function() {
  return this.setOutputVal(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Reduce.prototype.hasOutputVal = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.CoordHold.prototype.toObject = function(opt_includeInstance) {
  return proto.CoordHold.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.CoordHold} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CoordHold.toObject = function(includeInstance, msg) {
  var f, obj = {
    inputInnerCrd: (f = msg.getInputInnerCrd()) && stream_pb.CrdStream.StreamID.toObject(includeInstance, f),
    inputOuterCrd: (f = msg.getInputOuterCrd()) && stream_pb.CrdStream.StreamID.toObject(includeInstance, f),
    outputInnerCrd: (f = msg.getOutputInnerCrd()) && stream_pb.CrdStream.StreamID.toObject(includeInstance, f),
    outputOuterCrd: (f = msg.getOutputOuterCrd()) && stream_pb.CrdStream.StreamID.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.CoordHold}
 */
proto.CoordHold.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.CoordHold;
  return proto.CoordHold.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.CoordHold} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.CoordHold}
 */
proto.CoordHold.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new stream_pb.CrdStream.StreamID;
      reader.readMessage(value,stream_pb.CrdStream.StreamID.deserializeBinaryFromReader);
      msg.setInputInnerCrd(value);
      break;
    case 2:
      var value = new stream_pb.CrdStream.StreamID;
      reader.readMessage(value,stream_pb.CrdStream.StreamID.deserializeBinaryFromReader);
      msg.setInputOuterCrd(value);
      break;
    case 3:
      var value = new stream_pb.CrdStream.StreamID;
      reader.readMessage(value,stream_pb.CrdStream.StreamID.deserializeBinaryFromReader);
      msg.setOutputInnerCrd(value);
      break;
    case 4:
      var value = new stream_pb.CrdStream.StreamID;
      reader.readMessage(value,stream_pb.CrdStream.StreamID.deserializeBinaryFromReader);
      msg.setOutputOuterCrd(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.CoordHold.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.CoordHold.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.CoordHold} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CoordHold.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInputInnerCrd();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      stream_pb.CrdStream.StreamID.serializeBinaryToWriter
    );
  }
  f = message.getInputOuterCrd();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      stream_pb.CrdStream.StreamID.serializeBinaryToWriter
    );
  }
  f = message.getOutputInnerCrd();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      stream_pb.CrdStream.StreamID.serializeBinaryToWriter
    );
  }
  f = message.getOutputOuterCrd();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      stream_pb.CrdStream.StreamID.serializeBinaryToWriter
    );
  }
};


/**
 * optional CrdStream.StreamID input_inner_crd = 1;
 * @return {?proto.CrdStream.StreamID}
 */
proto.CoordHold.prototype.getInputInnerCrd = function() {
  return /** @type{?proto.CrdStream.StreamID} */ (
    jspb.Message.getWrapperField(this, stream_pb.CrdStream.StreamID, 1));
};


/**
 * @param {?proto.CrdStream.StreamID|undefined} value
 * @return {!proto.CoordHold} returns this
*/
proto.CoordHold.prototype.setInputInnerCrd = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.CoordHold} returns this
 */
proto.CoordHold.prototype.clearInputInnerCrd = function() {
  return this.setInputInnerCrd(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.CoordHold.prototype.hasInputInnerCrd = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional CrdStream.StreamID input_outer_crd = 2;
 * @return {?proto.CrdStream.StreamID}
 */
proto.CoordHold.prototype.getInputOuterCrd = function() {
  return /** @type{?proto.CrdStream.StreamID} */ (
    jspb.Message.getWrapperField(this, stream_pb.CrdStream.StreamID, 2));
};


/**
 * @param {?proto.CrdStream.StreamID|undefined} value
 * @return {!proto.CoordHold} returns this
*/
proto.CoordHold.prototype.setInputOuterCrd = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.CoordHold} returns this
 */
proto.CoordHold.prototype.clearInputOuterCrd = function() {
  return this.setInputOuterCrd(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.CoordHold.prototype.hasInputOuterCrd = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional CrdStream.StreamID output_inner_crd = 3;
 * @return {?proto.CrdStream.StreamID}
 */
proto.CoordHold.prototype.getOutputInnerCrd = function() {
  return /** @type{?proto.CrdStream.StreamID} */ (
    jspb.Message.getWrapperField(this, stream_pb.CrdStream.StreamID, 3));
};


/**
 * @param {?proto.CrdStream.StreamID|undefined} value
 * @return {!proto.CoordHold} returns this
*/
proto.CoordHold.prototype.setOutputInnerCrd = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.CoordHold} returns this
 */
proto.CoordHold.prototype.clearOutputInnerCrd = function() {
  return this.setOutputInnerCrd(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.CoordHold.prototype.hasOutputInnerCrd = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional CrdStream.StreamID output_outer_crd = 4;
 * @return {?proto.CrdStream.StreamID}
 */
proto.CoordHold.prototype.getOutputOuterCrd = function() {
  return /** @type{?proto.CrdStream.StreamID} */ (
    jspb.Message.getWrapperField(this, stream_pb.CrdStream.StreamID, 4));
};


/**
 * @param {?proto.CrdStream.StreamID|undefined} value
 * @return {!proto.CoordHold} returns this
*/
proto.CoordHold.prototype.setOutputOuterCrd = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.CoordHold} returns this
 */
proto.CoordHold.prototype.clearOutputOuterCrd = function() {
  return this.setOutputOuterCrd(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.CoordHold.prototype.hasOutputOuterCrd = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.CoordDrop.prototype.toObject = function(opt_includeInstance) {
  return proto.CoordDrop.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.CoordDrop} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CoordDrop.toObject = function(includeInstance, msg) {
  var f, obj = {
    inputInnerCrd: (f = msg.getInputInnerCrd()) && stream_pb.CrdStream.StreamID.toObject(includeInstance, f),
    inputOuterCrd: (f = msg.getInputOuterCrd()) && stream_pb.CrdStream.StreamID.toObject(includeInstance, f),
    outputInnerCrd: (f = msg.getOutputInnerCrd()) && stream_pb.CrdStream.StreamID.toObject(includeInstance, f),
    outputOuterCrd: (f = msg.getOutputOuterCrd()) && stream_pb.CrdStream.StreamID.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.CoordDrop}
 */
proto.CoordDrop.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.CoordDrop;
  return proto.CoordDrop.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.CoordDrop} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.CoordDrop}
 */
proto.CoordDrop.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new stream_pb.CrdStream.StreamID;
      reader.readMessage(value,stream_pb.CrdStream.StreamID.deserializeBinaryFromReader);
      msg.setInputInnerCrd(value);
      break;
    case 2:
      var value = new stream_pb.CrdStream.StreamID;
      reader.readMessage(value,stream_pb.CrdStream.StreamID.deserializeBinaryFromReader);
      msg.setInputOuterCrd(value);
      break;
    case 3:
      var value = new stream_pb.CrdStream.StreamID;
      reader.readMessage(value,stream_pb.CrdStream.StreamID.deserializeBinaryFromReader);
      msg.setOutputInnerCrd(value);
      break;
    case 4:
      var value = new stream_pb.CrdStream.StreamID;
      reader.readMessage(value,stream_pb.CrdStream.StreamID.deserializeBinaryFromReader);
      msg.setOutputOuterCrd(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.CoordDrop.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.CoordDrop.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.CoordDrop} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CoordDrop.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInputInnerCrd();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      stream_pb.CrdStream.StreamID.serializeBinaryToWriter
    );
  }
  f = message.getInputOuterCrd();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      stream_pb.CrdStream.StreamID.serializeBinaryToWriter
    );
  }
  f = message.getOutputInnerCrd();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      stream_pb.CrdStream.StreamID.serializeBinaryToWriter
    );
  }
  f = message.getOutputOuterCrd();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      stream_pb.CrdStream.StreamID.serializeBinaryToWriter
    );
  }
};


/**
 * optional CrdStream.StreamID input_inner_crd = 1;
 * @return {?proto.CrdStream.StreamID}
 */
proto.CoordDrop.prototype.getInputInnerCrd = function() {
  return /** @type{?proto.CrdStream.StreamID} */ (
    jspb.Message.getWrapperField(this, stream_pb.CrdStream.StreamID, 1));
};


/**
 * @param {?proto.CrdStream.StreamID|undefined} value
 * @return {!proto.CoordDrop} returns this
*/
proto.CoordDrop.prototype.setInputInnerCrd = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.CoordDrop} returns this
 */
proto.CoordDrop.prototype.clearInputInnerCrd = function() {
  return this.setInputInnerCrd(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.CoordDrop.prototype.hasInputInnerCrd = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional CrdStream.StreamID input_outer_crd = 2;
 * @return {?proto.CrdStream.StreamID}
 */
proto.CoordDrop.prototype.getInputOuterCrd = function() {
  return /** @type{?proto.CrdStream.StreamID} */ (
    jspb.Message.getWrapperField(this, stream_pb.CrdStream.StreamID, 2));
};


/**
 * @param {?proto.CrdStream.StreamID|undefined} value
 * @return {!proto.CoordDrop} returns this
*/
proto.CoordDrop.prototype.setInputOuterCrd = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.CoordDrop} returns this
 */
proto.CoordDrop.prototype.clearInputOuterCrd = function() {
  return this.setInputOuterCrd(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.CoordDrop.prototype.hasInputOuterCrd = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional CrdStream.StreamID output_inner_crd = 3;
 * @return {?proto.CrdStream.StreamID}
 */
proto.CoordDrop.prototype.getOutputInnerCrd = function() {
  return /** @type{?proto.CrdStream.StreamID} */ (
    jspb.Message.getWrapperField(this, stream_pb.CrdStream.StreamID, 3));
};


/**
 * @param {?proto.CrdStream.StreamID|undefined} value
 * @return {!proto.CoordDrop} returns this
*/
proto.CoordDrop.prototype.setOutputInnerCrd = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.CoordDrop} returns this
 */
proto.CoordDrop.prototype.clearOutputInnerCrd = function() {
  return this.setOutputInnerCrd(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.CoordDrop.prototype.hasOutputInnerCrd = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional CrdStream.StreamID output_outer_crd = 4;
 * @return {?proto.CrdStream.StreamID}
 */
proto.CoordDrop.prototype.getOutputOuterCrd = function() {
  return /** @type{?proto.CrdStream.StreamID} */ (
    jspb.Message.getWrapperField(this, stream_pb.CrdStream.StreamID, 4));
};


/**
 * @param {?proto.CrdStream.StreamID|undefined} value
 * @return {!proto.CoordDrop} returns this
*/
proto.CoordDrop.prototype.setOutputOuterCrd = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.CoordDrop} returns this
 */
proto.CoordDrop.prototype.clearOutputOuterCrd = function() {
  return this.setOutputOuterCrd(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.CoordDrop.prototype.hasOutputOuterCrd = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.CoordMask.prototype.toObject = function(opt_includeInstance) {
  return proto.CoordMask.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.CoordMask} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CoordMask.toObject = function(includeInstance, msg) {
  var f, obj = {
    inputInnerCrd: (f = msg.getInputInnerCrd()) && stream_pb.CrdStream.StreamID.toObject(includeInstance, f),
    inputOuterCrd: (f = msg.getInputOuterCrd()) && stream_pb.CrdStream.StreamID.toObject(includeInstance, f),
    inputRef: (f = msg.getInputRef()) && stream_pb.RefStream.StreamID.toObject(includeInstance, f),
    outputInnerCrd: (f = msg.getOutputInnerCrd()) && stream_pb.CrdStream.StreamID.toObject(includeInstance, f),
    outputOuterCrd: (f = msg.getOutputOuterCrd()) && stream_pb.CrdStream.StreamID.toObject(includeInstance, f),
    outputRef: (f = msg.getOutputRef()) && stream_pb.RefStream.StreamID.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.CoordMask}
 */
proto.CoordMask.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.CoordMask;
  return proto.CoordMask.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.CoordMask} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.CoordMask}
 */
proto.CoordMask.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new stream_pb.CrdStream.StreamID;
      reader.readMessage(value,stream_pb.CrdStream.StreamID.deserializeBinaryFromReader);
      msg.setInputInnerCrd(value);
      break;
    case 2:
      var value = new stream_pb.CrdStream.StreamID;
      reader.readMessage(value,stream_pb.CrdStream.StreamID.deserializeBinaryFromReader);
      msg.setInputOuterCrd(value);
      break;
    case 3:
      var value = new stream_pb.RefStream.StreamID;
      reader.readMessage(value,stream_pb.RefStream.StreamID.deserializeBinaryFromReader);
      msg.setInputRef(value);
      break;
    case 4:
      var value = new stream_pb.CrdStream.StreamID;
      reader.readMessage(value,stream_pb.CrdStream.StreamID.deserializeBinaryFromReader);
      msg.setOutputInnerCrd(value);
      break;
    case 5:
      var value = new stream_pb.CrdStream.StreamID;
      reader.readMessage(value,stream_pb.CrdStream.StreamID.deserializeBinaryFromReader);
      msg.setOutputOuterCrd(value);
      break;
    case 6:
      var value = new stream_pb.RefStream.StreamID;
      reader.readMessage(value,stream_pb.RefStream.StreamID.deserializeBinaryFromReader);
      msg.setOutputRef(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.CoordMask.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.CoordMask.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.CoordMask} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CoordMask.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInputInnerCrd();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      stream_pb.CrdStream.StreamID.serializeBinaryToWriter
    );
  }
  f = message.getInputOuterCrd();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      stream_pb.CrdStream.StreamID.serializeBinaryToWriter
    );
  }
  f = message.getInputRef();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      stream_pb.RefStream.StreamID.serializeBinaryToWriter
    );
  }
  f = message.getOutputInnerCrd();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      stream_pb.CrdStream.StreamID.serializeBinaryToWriter
    );
  }
  f = message.getOutputOuterCrd();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      stream_pb.CrdStream.StreamID.serializeBinaryToWriter
    );
  }
  f = message.getOutputRef();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      stream_pb.RefStream.StreamID.serializeBinaryToWriter
    );
  }
};


/**
 * optional CrdStream.StreamID input_inner_crd = 1;
 * @return {?proto.CrdStream.StreamID}
 */
proto.CoordMask.prototype.getInputInnerCrd = function() {
  return /** @type{?proto.CrdStream.StreamID} */ (
    jspb.Message.getWrapperField(this, stream_pb.CrdStream.StreamID, 1));
};


/**
 * @param {?proto.CrdStream.StreamID|undefined} value
 * @return {!proto.CoordMask} returns this
*/
proto.CoordMask.prototype.setInputInnerCrd = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.CoordMask} returns this
 */
proto.CoordMask.prototype.clearInputInnerCrd = function() {
  return this.setInputInnerCrd(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.CoordMask.prototype.hasInputInnerCrd = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional CrdStream.StreamID input_outer_crd = 2;
 * @return {?proto.CrdStream.StreamID}
 */
proto.CoordMask.prototype.getInputOuterCrd = function() {
  return /** @type{?proto.CrdStream.StreamID} */ (
    jspb.Message.getWrapperField(this, stream_pb.CrdStream.StreamID, 2));
};


/**
 * @param {?proto.CrdStream.StreamID|undefined} value
 * @return {!proto.CoordMask} returns this
*/
proto.CoordMask.prototype.setInputOuterCrd = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.CoordMask} returns this
 */
proto.CoordMask.prototype.clearInputOuterCrd = function() {
  return this.setInputOuterCrd(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.CoordMask.prototype.hasInputOuterCrd = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional RefStream.StreamID input_ref = 3;
 * @return {?proto.RefStream.StreamID}
 */
proto.CoordMask.prototype.getInputRef = function() {
  return /** @type{?proto.RefStream.StreamID} */ (
    jspb.Message.getWrapperField(this, stream_pb.RefStream.StreamID, 3));
};


/**
 * @param {?proto.RefStream.StreamID|undefined} value
 * @return {!proto.CoordMask} returns this
*/
proto.CoordMask.prototype.setInputRef = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.CoordMask} returns this
 */
proto.CoordMask.prototype.clearInputRef = function() {
  return this.setInputRef(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.CoordMask.prototype.hasInputRef = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional CrdStream.StreamID output_inner_crd = 4;
 * @return {?proto.CrdStream.StreamID}
 */
proto.CoordMask.prototype.getOutputInnerCrd = function() {
  return /** @type{?proto.CrdStream.StreamID} */ (
    jspb.Message.getWrapperField(this, stream_pb.CrdStream.StreamID, 4));
};


/**
 * @param {?proto.CrdStream.StreamID|undefined} value
 * @return {!proto.CoordMask} returns this
*/
proto.CoordMask.prototype.setOutputInnerCrd = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.CoordMask} returns this
 */
proto.CoordMask.prototype.clearOutputInnerCrd = function() {
  return this.setOutputInnerCrd(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.CoordMask.prototype.hasOutputInnerCrd = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional CrdStream.StreamID output_outer_crd = 5;
 * @return {?proto.CrdStream.StreamID}
 */
proto.CoordMask.prototype.getOutputOuterCrd = function() {
  return /** @type{?proto.CrdStream.StreamID} */ (
    jspb.Message.getWrapperField(this, stream_pb.CrdStream.StreamID, 5));
};


/**
 * @param {?proto.CrdStream.StreamID|undefined} value
 * @return {!proto.CoordMask} returns this
*/
proto.CoordMask.prototype.setOutputOuterCrd = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.CoordMask} returns this
 */
proto.CoordMask.prototype.clearOutputOuterCrd = function() {
  return this.setOutputOuterCrd(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.CoordMask.prototype.hasOutputOuterCrd = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional RefStream.StreamID output_ref = 6;
 * @return {?proto.RefStream.StreamID}
 */
proto.CoordMask.prototype.getOutputRef = function() {
  return /** @type{?proto.RefStream.StreamID} */ (
    jspb.Message.getWrapperField(this, stream_pb.RefStream.StreamID, 6));
};


/**
 * @param {?proto.RefStream.StreamID|undefined} value
 * @return {!proto.CoordMask} returns this
*/
proto.CoordMask.prototype.setOutputRef = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.CoordMask} returns this
 */
proto.CoordMask.prototype.clearOutputRef = function() {
  return this.setOutputRef(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.CoordMask.prototype.hasOutputRef = function() {
  return jspb.Message.getField(this, 6) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.arrayvals.prototype.toObject = function(opt_includeInstance) {
  return proto.arrayvals.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.arrayvals} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.arrayvals.toObject = function(includeInstance, msg) {
  var f, obj = {
    tensor: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.arrayvals}
 */
proto.arrayvals.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.arrayvals;
  return proto.arrayvals.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.arrayvals} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.arrayvals}
 */
proto.arrayvals.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTensor(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.arrayvals.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.arrayvals.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.arrayvals} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.arrayvals.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTensor();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string tensor = 1;
 * @return {string}
 */
proto.arrayvals.prototype.getTensor = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.arrayvals} returns this
 */
proto.arrayvals.prototype.setTensor = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


goog.object.extend(exports, proto);
